# -*- coding: utf-8 -*-
"""12 e 13 Tópicos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11GJ3dleJ-mNnzPgYP_kGnKbgHfIMmmBG
"""

'''
para raiz quadrada( import math e código é math.sqrt)
1 - Operações Aritméticas: Realiza cálculos básicos como soma, subtração, multiplicação, divisão, etc.
2 - Variáveis: Armazena valores que podem ser usados e manipulados ao longo do código.
3 - Entrada e Saída de Dados: Recebe informações do usuário (input) e exibe resultados (print).
4 - Condicionais (if, elif, else): Toma decisões baseadas em condições, permitindo executar blocos de código diferentes dependendo das entradas.
5 - Conversão de Tipos: Converte dados de um tipo para outro (inteiros, strings, etc.), garantindo que os valores sejam tratados adequadamente.
6 - Tratamento de Erros e Exceções (try, except): Evita que o programa pare de funcionar ao lidar com erros, como quando o usuário insere um valor inválido.
7 - Formatação de Strings (f-strings): Formata a saída de dados de maneira clara, como apresentar números com casas decimais específicas.
8 - Atribuições e Cálculos em Blocos Estruturados: Realiza operações com variáveis e usa lógica de forma organizada e legível.
9 - Listas: Armazena múltiplos valores em uma única variável, permitindo manipulações como adição, remoção e verificação de elementos.
10 - Loop for: Executa um bloco de código várias vezes, útil para percorrer listas ou realizar tarefas repetitivas.
11 - Loop while: Repete um bloco de código enquanto uma condição for verdadeira, permitindo que o usuário faça novas entradas ou verificações até que a condição seja quebrada.
12 - Funções: Cria blocos de código reutilizáveis que podem ser chamados sempre que necessário, ajudando a organizar e modularizar o código.
13 - Biblioteca - from itertools import count, gera números inteiros sequenciais, começando (por padrão, em 0). Quando precisa de uma sequência infinita de números, como em loops ou contadores.
'''

'''Exercício 40: Função de Substituição e Soma
Crie uma função chamada substitui_impares que:

Receba uma lista de números inteiros.
Peça ao usuário um valor para substituir todos os números ímpares da lista.
Substitua os números ímpares pelo valor informado.
Retorne a lista modificada.
Crie uma função chamada soma_lista que:

Receba uma lista de números inteiros.
Retorne a soma dos números da lista.
No programa principal:

Peça para o usuário digitar até 6 números inteiros. Se o número for negativo, encerre a entrada.
Utilize a função substitui_impares para fazer a substituição dos ímpares.
Utilize a função soma_lista para calcular a soma dos números da lista.
Exiba a lista final e a soma.'''

def substitui_impares(lista):
  while True:
    try:
      valor = int(input("Digite um valor para substituir os ímpares: "))
      for p in range(len(lista)):
        if lista[p] % 2 != 0:
          lista[p] = valor
      return lista
    except ValueError:
        print('Digite apenas números inteiros')

def soma_lista(lista):
  return sum(lista)

lista_vazia = []
print("Você pode digitar até 6 números inteiros. Para encerrar, digite um número negativo.")
for n in range(1, 7):
  while True:
    try:
      numeros = int(input(f'Digite o {n}° número inteiro: '))
      if n == 1 and numeros < 0:
        print('Número negativo digitado, comece novamente')
        continue
      if numeros < 0:
        print('Número negativo digitado, encerrando entrada de números')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break

if any(numero % 2 != 0 for numero in lista_vazia):
    nova_lista = substitui_impares(lista_vazia)
    soma = soma_lista(nova_lista)
    print(f'A sua nova lista após substituição é: {nova_lista}')
    print(f'A soma da lista é: {soma:.2f}')

else:
    soma = soma_lista(lista_vazia)
    print(f'A soma da lista é: {soma:.2f}')

'''Exercício 15 / 27 / 41

Solicite ao usuário que informe 5 números inteiros, um de cada vez.
Armazene esses números em uma lista.
Exiba os números digitados na tela.
Peça ao usuário que informe um número para ser multiplicado por cada valor da lista.
Realize a multiplicação e substitua os valores da lista pelos resultados.
Exiba a nova lista formatada com duas casas decimais.
Se o usuário digitar um valor que não seja um número, o programa deve informar um erro e solicitar que ele tente novamente (use o try-except).
Caso algum número informado seja negativo, exiba uma mensagem informando que "Números negativos foram digitados".
No final, mostre a soma total dos números da lista multiplicada.
Alterar o código feito para incluir o loop while
Incluir alguma função'''

def multiplicador_lista(lista):
  while True:
    try:
      multiplicador = int(input('Digite um número para multiplicar por cada valor da lista: '))
      if multiplicador >= 0:
        nova_lista = [numero * multiplicador for numero in lista]
        return nova_lista
      else:
        print('Digite apenas números inteiros')
    except ValueError:
      print('Digite apenas números inteiros')

def soma_lista(lista):
  return sum(lista)

def formatacao(lista):
  lista_formatada = [f'{numero:.2f}' for numero in lista]
  return lista_formatada

lista_vazia = []

print("Você pode digitar até 5 números inteiros. Para encerrar, digite um número negativo.")

for n in range(1, 6):
  while True:
    try:
      numeros = int(input(f'Digite o {n}° número inteiro: '))
      if n == 1 and numeros < 0:
        print('Número negativo digitado, comece novamente')
        continue
      if numeros < 0:
        print('Número negativo digitado. Encerrando a entrada de números.')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break

print(f'Os números digitados foram: {lista_vazia}')
nova_lista = multiplicador_lista(lista_vazia)
lista_formatada = formatacao(nova_lista)
print(f'Sua nova lista após a multiplicação é: {lista_formatada}')

soma_total = soma_lista(nova_lista)
print(f'A soma da lista após a multiplicação é: {soma_total:.2f}')

'''Exercício 16: / 28 / 42

Solicite ao usuário que digite 5 números inteiros e armazene-os em uma lista.
Verifique se algum número é par e exiba a mensagem: "Número par encontrado" se houver pelo menos um número par.
Pergunte ao usuário se ele deseja multiplicar os números da lista por um valor escolhido.
        Caso a resposta seja "sim", solicite o valor de multiplicação e aplique-o a cada número da lista.
Exiba a nova lista após a multiplicação com os números formatados com duas casas decimais.
Calcule e exiba a soma de todos os números na lista (multiplicados ou não).
Trate possíveis erros de digitação usando try e except, e mostre uma mensagem apropriada ao usuário.
Alterar o código feito para incluir o loop while
Incluir alguma função'''

def multiplicar_lista(lista):
  while True:
    try:
      multiplicador = int(input('Digite o número a ser multiplicado: '))
      if multiplicador <= 0:
        print('Número negativo digitado, digite novamente')
      else:
        nova_lista = [numero * multiplicador for numero in lista]
        return nova_lista
    except ValueError:
      print('Digite apenas números inteiros')

def formatar_lista(lista):
  lista_formatada = [f'{numero:.2f}' for numero in lista]
  return lista_formatada

def soma_total_lista(lista):
  return sum(lista)

lista_vazia = []
print("Você pode digitar até 5 números inteiros. Para encerrar, digite um número negativo.")
for n in range(1, 6):
  while True:
    try:
      numeros = int(input(f'Digite o {n}º número inteiro: '))
      if n == 1 and numeros < 0:
        print('O primeiro número não pode ser menor que 0. Tente novamente')
        continue
      if numeros < 0:
        print('Número negativo digitado. Encerrando a entrada de números.')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break

pares = [numero for numero in lista_vazia if numero % 2 == 0]

if pares:
  print(f'Número(s) par(es) encontrado(s): {pares}')

while True:
  pergunta = input('Deseja multiplicar os números da lista por um valor escolhido? (Sim) ou (Não): ').lower()
  if pergunta in ['sim', 'não']:
    break
  else:
    print('Escolha uma das opções: (Sim) ou (Não)')

if pergunta == 'sim':
  nova_lista = multiplicar_lista(lista_vazia)
  lista_formatada = formatar_lista(nova_lista)
  print(f'Sua nova lista após a multiplicação e formatação é: {lista_formatada}')
  soma_multiplicado = soma_total_lista(nova_lista)
  print(f'A soma de sua lista após a multiplicação é: {soma_multiplicado:.2f}')

else:
  lista_formatada = formatar_lista(lista_vazia)
  print(f'Sua lista formatada é: {lista_formatada}')
  soma_sem_multiplicacao = soma_total_lista(lista_vazia)
  print(f'A soma de sua lista sem a multiplicação é: {soma_sem_multiplicacao:.2f}')

'''Exercício 17 / 29 / 43:

Peça ao usuário para digitar 6 números inteiros e armazene-os em uma lista.
Verifique se todos os números são ímpares. Se sim, exiba a mensagem: "Todos os números são ímpares". Caso contrário, exiba: "Há pelo menos um número par".
Pergunte ao usuário se ele deseja: Somar os números, Multiplicar os números por um valor que ele escolher.
Se o usuário escolher somar, mostre o resultado da soma e a lista de números formatados com duas casas decimais.
Se o usuário escolher multiplicar, peça o número para multiplicar cada valor da lista.
Mostre a nova lista após a multiplicação e a soma dos valores multiplicados, tudo formatado com duas casas decimais.
Trate entradas inválidas usando try e except para garantir que o usuário digite apenas números inteiros.
Alterar o código feito para incluir o loop while
Incluir alguma função'''

def multiplicador_lista(lista):
  while True:
    try:
      multiplicador = int(input('Escolha o número inteiro e maior que 0 a ser multiplicado : '))
      if multiplicador <= 0:
        print('O primeiro número não pode ser negativo. Tente novamente.')
      else:
        nova_lista = [numero * multiplicador for numero in lista]
        return nova_lista
    except ValueError:
      print('Digite apenas números inteiros e maior que 0')

def formatacao_lista(lista):
  lista_formatada = [f'{numero:.2f}' for numero in lista]
  return lista_formatada

def soma_total(lista):
  return sum(lista)

lista_vazia = []

print("Você pode digitar até 5 números inteiros. Para encerrar, digite um número negativo.")

for n in range(1, 6):
  while True:
    try:
      numeros = int(input(f'Digite o {n}° número inteiro: '))
      if n == 1 and numeros < 0:
        print('O primeiro número não pode ser negativo. Tente novamente.')
        continue
      if numeros < 0:
        print('Número negativo digitado. Encerrando a entrada de números.')
        break # encerra while
      lista_vazia.append(numeros)
      break # Sai do loop while para continuar o for
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break # Esse break encerraria o loop for

if all(numero % 2 != 0 for numero in lista_vazia):
  print('Todos número são impares')

else:
  pares = [numero for numero in lista_vazia if numero % 2 == 0]
  print(f'Número(s) par(es) encontrado(s): {pares}')

while True:
  pergunta = input('Deseja somar ou multiplicar os números por um valor que escolher? (Somar) ou (Multiplicar): ').lower()
  if pergunta in ['somar', 'multiplicar']:
    break
  else:
    print('Escolha entre as opções (Somar) ou (Multiplicar)')

if pergunta == 'somar':
  soma = soma_total(lista_vazia)
  print(f'A soma da lista é: {soma:.2f}')
  formatacao = formatacao_lista(lista_vazia)
  print(f'A lista após a formatação é: {formatacao}')

else:
  nova_lista = multiplicador_lista(lista_vazia)
  formatacao = formatacao_lista(nova_lista)
  print(f'Sua nova lista após a multiplicação é: {formatacao}')
  soma = soma_total(nova_lista)
  print(f'A soma da nova lista é: {soma:.2f}')

'''Exercício 18 / 30 / 44:

Peça ao usuário para digitar 5 números inteiros e armazene-os em uma lista.
Verifique se existe algum número maior que 10 na lista. Se sim, exiba: "Há pelo menos um número maior que 10". Caso contrário, exiba: "Todos os números são menores ou iguais a 10".
Pergunte ao usuário se ele deseja substituir todos os números menores ou iguais a 10 por 0.
Se o usuário responder "sim", faça a substituição e mostre a nova lista formatada com duas casas decimais.
Se o usuário responder "não", exiba a lista original formatada.
Mostre a soma dos números da lista final (após a substituição, se houver).
Use try e except para tratar entradas inválidas, garantindo que o usuário digite apenas números inteiros.
Alterar o código feito para incluir o loop while
Incluir alguma função'''

def formatacao_lista(lista):
  lista_formatada = [f'{numero:.2f}' for numero in lista]
  return lista_formatada

def soma_total(lista):
  return sum(lista)

lista_vazia = []
print("Você pode digitar até 5 números inteiros. Para encerrar, digite um número negativo.")

for n in range(1, 6):
  while True:
    try:
      numeros = int(input(f'Digite o {n}° número inteiro: '))
      if n == 1 and numeros < 0:
        print('O primeiro número não pode ser negativo. Tente novamente.')
        continue
      if numeros < 0:
        print('Número negativo digitado. Encerrando a entrada de números.')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break

if any(numero > 10 for numero in lista_vazia):
  maiores = [numero for numero in lista_vazia if numero > 10]
  print(f'Há número(s) maior(es) que 10: {maiores}')
else:
  print('Todos os números são menores ou igual a 10')

while True:
  pergunta = input('Deseja substituir todos os números menores ou igual a 10 por 0? (Sim) ou (Não): ').lower()
  if pergunta in ['sim', 'não']:
    break
  else:
    print('Escolha uma das opções: (Sim) ou (Não)')

if pergunta == 'sim':
  for p, numero in enumerate(lista_vazia):
    if numero <= 10:
      lista_vazia[p] = 0

  formatacao = formatacao_lista(lista_vazia)
  print(f'Sua nova lista após a substituição é: {formatacao}')

  soma = soma_total(lista_vazia)
  print(f'A soma dos números após substituição: {soma}')
else:
  formatacao = formatacao_lista(lista_vazia)
  print(f'Sua lista formatada é: {formatacao}')

'''Exercício 45:
Descrição: Você deve criar um programa que solicita ao usuário que insira as notas de um aluno (de 0 a 10)
até que ele decida parar. O programa deve então calcular e exibir a média das notas inseridas,
a maior e a menor nota, e também o número de notas válidas inseridas.

Requisitos:

O programa deve continuar pedindo notas até que o usuário insira uma nota negativa ou uma nota maior que 10.
As notas válidas devem ser armazenadas em uma lista.
Se o usuário não inserir nenhuma nota válida, exiba uma mensagem informando que nenhuma nota válida foi inserida.

Caso contrário, exiba a média, a maior e a menor nota e o número de notas válidas inseridas'''

from itertools import count

def formatacao_lista(lista):
  lista_formatada = [f'{numero:.2f}' for numero in lista]
  return lista_formatada

lista_vazia = []

print("Digite suas notas de 0 a 10, quantas vezes quiser. Para encerrar, digite um número negativo ou maior que 10.")
for n in count(1):
  while True:
    try:
      numeros = int(input(f'Digite a {n}° nota do aluno (ou uma nota negativa para encerrar) '))
      if n == 1 and numeros < 0 or numeros > 10:
        print('O primeiro número não pode ser negativo nem maior que 10. Tente novamente.')
        continue
      if numeros < 0 or numeros > 10:
        print('Número negativo ou maior que 10 digitado. Encerrando a entrada de números.')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite notas válidas')
  if numeros < 0 or numeros > 10:
    break

media = sum(lista_vazia) / len(lista_vazia)
print(f'A média da(s) nota(s) inserida(s): {media:.2f}')

maior = max(lista_vazia)
print(f'A maior nota inserida é: {maior}')

menor = min(lista_vazia)
print(f'A menor nota inserida é: {menor}')

numero_de_notas = len(lista_vazia)
print(f'Foi(ram) {numero_de_notas} nota(s) válida(s). A(s) nota(s) válida(s) é(são): {lista_vazia}')

'''Exercício 19 / 31 / 46:

Solicite ao usuário 5 números inteiros. O programa deverá fazer o seguinte:
Armazenar os números em uma lista.
Verificar se todos os números são múltiplos de 3. Se forem, exibir uma mensagem informando que todos são múltiplos de 3; caso contrário, informar que nem todos são múltiplos de 3.
Perguntar ao usuário se ele deseja elevar os números da lista ao quadrado. A resposta deve ser 'sim' ou 'não'.
Se a resposta for 'sim', eleve cada número da lista ao quadrado, exiba a nova lista formatada com duas casas decimais e também mostre a soma total da nova lista.
Se a resposta for 'não', exiba a lista original formatada com duas casas decimais e a soma dos números da lista original.
Trate possíveis erros de entrada com try e except, garantindo que o usuário insira apenas números inteiros.
Alterar o código feito para incluir o loop while

try - é pra eliminar o erro quando é letra e ele deixa passar
while - é pra não deixar passar qdo houver erro'''

def formatar_lista(lista):
  return [f'{numero:.2f}' for numero in lista]

lista_vazia = []
print("Você pode digitar até 5 números inteiros. Para encerrar, digite um número negativo.")
for n in range(1, 6):
  while True:
    try:
      numeros = int(input(f'Digite o {n}° número inteiro: '))
      if n == 1 and numeros < 0:
        print('O primeiro número não pode ser negativo. Tente novamente.')
        continue
      if numeros < 0:
        print('Número negativo digitado. Encerrando a entrada de números.')
        break
      lista_vazia.append(numeros)
      break
    except ValueError:
      print('Digite apenas números inteiros')
  if numeros < 0:
    break

if all(numero % 3 == 0 for numero in lista_vazia):
  print('Todos os números digitados são múltiplos de 3')

else:
  nao_multiplos = [numero for numero in lista_vazia if numero % 3 != 0]
  print(f'Esse(s) número(s) digitado(s) não é(são) múltiplo(s) de 3: {nao_multiplos}')

while True:
  pergunta = input('Deseja elevar os números da lista ao quadrado? (Sim) ou (Não): ').lower()
  if pergunta in ['sim', 'não']:
    break
  else:
    print('Escolha entre as opções (Sim) ou (Nâo)')

if pergunta == 'sim':
  nova_lista = [numero ** 2 for numero in lista_vazia]
  formatar = formatar_lista(nova_lista)
  print(f'Sua nova lista após elevar ao quadrado é: {formatar}')

  soma_total = sum(nova_lista)
  print(f'A soma total dos números após elevar ao quadrado é: {soma_total:.2f}')

else:
  lista_formatada = formatar_lista(lista_vazia)
  print(f'Sua lista é: {lista_formatada}')

  soma_total = sum(lista_vazia)
  print(f'A soma total dos números é: {soma_total:.2f}')